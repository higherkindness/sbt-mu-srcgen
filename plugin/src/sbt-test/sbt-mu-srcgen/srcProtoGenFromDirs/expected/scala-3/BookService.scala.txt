package com.proto.book

trait BookService[F[_]] {
  def GetBook(req: _root_.com.proto.book.GetBookRequest): F[_root_.com.proto.book.Book]
  def GetBooksViaAuthor(req: _root_.com.proto.book.GetBookViaAuthor): F[_root_.fs2.Stream[F, _root_.com.proto.book.Book]]
  def GetGreatestBook(req: _root_.fs2.Stream[F, _root_.com.proto.book.GetBookRequest]): F[_root_.com.proto.book.Book]
  def GetBooks(req: _root_.fs2.Stream[F, _root_.com.proto.book.GetBookRequest]): F[_root_.fs2.Stream[F, _root_.com.proto.book.Book]]
}

object BookService {
  import _root_.higherkindness.mu.rpc.internal.encoders.spb.given
  val GetBookMethodDescriptor: _root_.io.grpc.MethodDescriptor[_root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book] = _root_.io.grpc.MethodDescriptor.newBuilder(summon[_root_.io.grpc.MethodDescriptor.Marshaller[_root_.com.proto.book.GetBookRequest]], summon[_root_.io.grpc.MethodDescriptor.Marshaller[_root_.com.proto.book.Book]]).setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY).setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("com.proto.BookService", "GetBook")).build()
  val GetBooksViaAuthorMethodDescriptor: _root_.io.grpc.MethodDescriptor[_root_.com.proto.book.GetBookViaAuthor, _root_.com.proto.book.Book] = _root_.io.grpc.MethodDescriptor.newBuilder(summon[_root_.io.grpc.MethodDescriptor.Marshaller[_root_.com.proto.book.GetBookViaAuthor]], summon[_root_.io.grpc.MethodDescriptor.Marshaller[_root_.com.proto.book.Book]]).setType(_root_.io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING).setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("com.proto.BookService", "GetBooksViaAuthor")).build()
  val GetGreatestBookMethodDescriptor: _root_.io.grpc.MethodDescriptor[_root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book] = _root_.io.grpc.MethodDescriptor.newBuilder(summon[_root_.io.grpc.MethodDescriptor.Marshaller[_root_.com.proto.book.GetBookRequest]], summon[_root_.io.grpc.MethodDescriptor.Marshaller[_root_.com.proto.book.Book]]).setType(_root_.io.grpc.MethodDescriptor.MethodType.CLIENT_STREAMING).setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("com.proto.BookService", "GetGreatestBook")).build()
  val GetBooksMethodDescriptor: _root_.io.grpc.MethodDescriptor[_root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book] = _root_.io.grpc.MethodDescriptor.newBuilder(summon[_root_.io.grpc.MethodDescriptor.Marshaller[_root_.com.proto.book.GetBookRequest]], summon[_root_.io.grpc.MethodDescriptor.Marshaller[_root_.com.proto.book.Book]]).setType(_root_.io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING).setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("com.proto.BookService", "GetBooks")).build()
  def bindService[F[_]](using CE: _root_.cats.effect.Async[F], algebra: BookService[F]): _root_.cats.effect.Resource[F, _root_.io.grpc.ServerServiceDefinition] = _root_.cats.effect.std.Dispatcher[F].evalMap {
    disp => _root_.higherkindness.mu.rpc.internal.service.GRPCServiceDefBuilder.build[F]("com.proto.BookService", (GetBookMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.handlers.unary[F, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](algebra.GetBook, _root_.higherkindness.mu.rpc.protocol.Identity, disp)), (GetBooksViaAuthorMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.fs2.handlers.serverStreaming[F, _root_.com.proto.book.GetBookViaAuthor, _root_.com.proto.book.Book]((req: _root_.com.proto.book.GetBookViaAuthor, _) => algebra.GetBooksViaAuthor(req), disp, _root_.higherkindness.mu.rpc.protocol.Identity)), (GetGreatestBookMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.fs2.handlers.clientStreaming[F, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book]((req: _root_.fs2.Stream[F, _root_.com.proto.book.GetBookRequest], _) => algebra.GetGreatestBook(req), disp, _root_.higherkindness.mu.rpc.protocol.Identity)), (GetBooksMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.fs2.handlers.bidiStreaming[F, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book]((req: _root_.fs2.Stream[F, _root_.com.proto.book.GetBookRequest], _) => algebra.GetBooks(req), disp, _root_.higherkindness.mu.rpc.protocol.Identity)))
  }
  def bindContextService[F[_], Context](using CE: _root_.cats.effect.Async[F], serverContext: _root_.higherkindness.mu.rpc.internal.context.ServerContext[F, Context], algebra: BookService[[A] =>> _root_.cats.data.Kleisli[F, Context, A]]): _root_.cats.effect.Resource[F, _root_.io.grpc.ServerServiceDefinition] = _root_.cats.effect.std.Dispatcher[F].evalMap {
    disp => _root_.higherkindness.mu.rpc.internal.service.GRPCServiceDefBuilder.build[F]("com.proto.BookService", (GetBookMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.handlers.contextUnary[F, Context, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](algebra.GetBook, GetBookMethodDescriptor, _root_.higherkindness.mu.rpc.protocol.Identity, disp)), (GetBooksViaAuthorMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.fs2.handlers.contextServerStreaming[F, Context, _root_.com.proto.book.GetBookViaAuthor, _root_.com.proto.book.Book](algebra.GetBooksViaAuthor, GetBooksViaAuthorMethodDescriptor, disp, _root_.higherkindness.mu.rpc.protocol.Identity)), (GetGreatestBookMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.fs2.handlers.contextClientStreaming[F, Context, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](algebra.GetGreatestBook, GetGreatestBookMethodDescriptor, disp, _root_.higherkindness.mu.rpc.protocol.Identity)), (GetBooksMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.fs2.handlers.contextBidiStreaming[F, Context, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](algebra.GetBooks, GetBooksMethodDescriptor, disp, _root_.higherkindness.mu.rpc.protocol.Identity)))
  }
  class Client[F[_]](channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT)(using CE: _root_.cats.effect.Async[F]) extends _root_.io.grpc.stub.AbstractStub[Client[F]](channel, options) with BookService[F] {
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): Client[F] = new Client[F](channel, options)
    def GetBook(input: _root_.com.proto.book.GetBookRequest): F[_root_.com.proto.book.Book] = _root_.higherkindness.mu.rpc.internal.client.calls.unary[F, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](input, GetBookMethodDescriptor, channel, options)
    def GetBooksViaAuthor(input: _root_.com.proto.book.GetBookViaAuthor): F[_root_.fs2.Stream[F, _root_.com.proto.book.Book]] = _root_.higherkindness.mu.rpc.internal.client.fs2.calls.serverStreaming[F, _root_.com.proto.book.GetBookViaAuthor, _root_.com.proto.book.Book](input, GetBooksViaAuthorMethodDescriptor, channel, options)
    def GetGreatestBook(input: _root_.fs2.Stream[F, _root_.com.proto.book.GetBookRequest]): F[_root_.com.proto.book.Book] = _root_.higherkindness.mu.rpc.internal.client.fs2.calls.clientStreaming[F, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](input, GetGreatestBookMethodDescriptor, channel, options)
    def GetBooks(input: _root_.fs2.Stream[F, _root_.com.proto.book.GetBookRequest]): F[_root_.fs2.Stream[F, _root_.com.proto.book.Book]] = _root_.higherkindness.mu.rpc.internal.client.fs2.calls.bidiStreaming[F, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](input, GetBooksMethodDescriptor, channel, options)
  }
  def client[F[_]](channelFor: _root_.higherkindness.mu.rpc.ChannelFor, channelConfigList: List[_root_.higherkindness.mu.rpc.channel.ManagedChannelConfig] = List(_root_.higherkindness.mu.rpc.channel.UsePlaintext()), options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT)(using CE: _root_.cats.effect.Async[F]): _root_.cats.effect.Resource[F, BookService[F]] = _root_.cats.effect.Resource.make(new _root_.higherkindness.mu.rpc.channel.ManagedChannelInterpreter[F](channelFor, channelConfigList).build)(channel => CE.void(CE.delay(channel.shutdown()))).evalMap(ch => CE.delay(new Client[F](ch, options)))
  def clientFromChannel[F[_]](channel: F[_root_.io.grpc.ManagedChannel], options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT)(using CE: _root_.cats.effect.Async[F]): _root_.cats.effect.Resource[F, BookService[F]] = _root_.cats.effect.Resource.make(channel)(channel => CE.void(CE.delay(channel.shutdown()))).evalMap(ch => CE.delay(new Client[F](ch, options)))
  def unsafeClient[F[_]](channelFor: _root_.higherkindness.mu.rpc.ChannelFor, channelConfigList: List[_root_.higherkindness.mu.rpc.channel.ManagedChannelConfig] = List(_root_.higherkindness.mu.rpc.channel.UsePlaintext()), disp: _root_.cats.effect.std.Dispatcher[F], options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT)(using CE: _root_.cats.effect.Async[F]): BookService[F] = {
    val managedChannelInterpreter = new _root_.higherkindness.mu.rpc.channel.ManagedChannelInterpreter[F](channelFor, channelConfigList).unsafeBuild(disp)
    new Client[F](managedChannelInterpreter, options)
  }
  def unsafeClientFromChannel[F[_]](channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT)(using CE: _root_.cats.effect.Async[F]): BookService[F] = new Client[F](channel, options)
  class ContextClient[F[_], Context](channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT)(using CE: _root_.cats.effect.Async[F], clientContext: _root_.higherkindness.mu.rpc.internal.context.ClientContext[F, Context]) extends _root_.io.grpc.stub.AbstractStub[ContextClient[F, Context]](channel, options) with BookService[[A] =>> _root_.cats.data.Kleisli[F, Context, A]] {
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ContextClient[F, Context] = new ContextClient[F, Context](channel, options)
    def GetBook(input: _root_.com.proto.book.GetBookRequest): _root_.cats.data.Kleisli[F, Context, _root_.com.proto.book.Book] = _root_.higherkindness.mu.rpc.internal.client.calls.contextUnary[F, Context, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](input, GetBookMethodDescriptor, channel, options)
    def GetBooksViaAuthor(input: _root_.com.proto.book.GetBookViaAuthor): _root_.cats.data.Kleisli[F, Context, _root_.fs2.Stream[[A] =>> _root_.cats.data.Kleisli[F, Context, A], _root_.com.proto.book.Book]] = _root_.higherkindness.mu.rpc.internal.client.fs2.calls.contextServerStreaming[F, Context, _root_.com.proto.book.GetBookViaAuthor, _root_.com.proto.book.Book](input, GetBooksViaAuthorMethodDescriptor, channel, options)
    def GetGreatestBook(input: _root_.fs2.Stream[[A] =>> _root_.cats.data.Kleisli[F, Context, A], _root_.com.proto.book.GetBookRequest]): _root_.cats.data.Kleisli[F, Context, _root_.com.proto.book.Book] = _root_.higherkindness.mu.rpc.internal.client.fs2.calls.contextClientStreaming[F, Context, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](input, GetGreatestBookMethodDescriptor, channel, options)
    def GetBooks(input: _root_.fs2.Stream[[A] =>> _root_.cats.data.Kleisli[F, Context, A], _root_.com.proto.book.GetBookRequest]): _root_.cats.data.Kleisli[F, Context, _root_.fs2.Stream[[A] =>> _root_.cats.data.Kleisli[F, Context, A], _root_.com.proto.book.Book]] = _root_.higherkindness.mu.rpc.internal.client.fs2.calls.contextBidiStreaming[F, Context, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](input, GetBooksMethodDescriptor, channel, options)
  }
  def contextClient[F[_], Context](channelFor: _root_.higherkindness.mu.rpc.ChannelFor, channelConfigList: List[_root_.higherkindness.mu.rpc.channel.ManagedChannelConfig] = List(_root_.higherkindness.mu.rpc.channel.UsePlaintext()), options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT)(using CE: _root_.cats.effect.Async[F], clientContext: _root_.higherkindness.mu.rpc.internal.context.ClientContext[F, Context]): _root_.cats.effect.Resource[F, BookService[[A] =>> _root_.cats.data.Kleisli[F, Context, A]]] = _root_.cats.effect.Resource.make(new _root_.higherkindness.mu.rpc.channel.ManagedChannelInterpreter[F](channelFor, channelConfigList).build)(channel => CE.void(CE.delay(channel.shutdown()))).evalMap(ch => CE.delay(new ContextClient[F, Context](ch, options)))
  def contextClientFromChannel[F[_], Context](channel: F[_root_.io.grpc.ManagedChannel], options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT)(using CE: _root_.cats.effect.Async[F], clientContext: _root_.higherkindness.mu.rpc.internal.context.ClientContext[F, Context]): _root_.cats.effect.Resource[F, BookService[[A] =>> _root_.cats.data.Kleisli[F, Context, A]]] = _root_.cats.effect.Resource.make(channel)(channel => CE.void(CE.delay(channel.shutdown()))).evalMap(ch => CE.delay(new ContextClient[F, Context](ch, options)))
  def unsafeContextClient[F[_], Context](channelFor: _root_.higherkindness.mu.rpc.ChannelFor, channelConfigList: List[_root_.higherkindness.mu.rpc.channel.ManagedChannelConfig] = List(_root_.higherkindness.mu.rpc.channel.UsePlaintext()), disp: _root_.cats.effect.std.Dispatcher[F], options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT)(using CE: _root_.cats.effect.Async[F], clientContext: _root_.higherkindness.mu.rpc.internal.context.ClientContext[F, Context]): BookService[[A] =>> _root_.cats.data.Kleisli[F, Context, A]] = {
    val managedChannelInterpreter = new _root_.higherkindness.mu.rpc.channel.ManagedChannelInterpreter[F](channelFor, channelConfigList).unsafeBuild(disp)
    new ContextClient[F, Context](managedChannelInterpreter, options)
  }
  def unsafeContextClientFromChannel[F[_], Context](channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT)(using CE: _root_.cats.effect.Async[F], clientContext: _root_.higherkindness.mu.rpc.internal.context.ClientContext[F, Context]): BookService[[A] =>> _root_.cats.data.Kleisli[F, Context, A]] = new ContextClient[F, Context](channel, options)
}
