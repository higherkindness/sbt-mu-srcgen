package com.proto.book

trait BookService[F[_]] {
  def GetBook(req: _root_.com.proto.book.GetBookRequest): F[_root_.com.proto.book.Book]
  def GetBooksViaAuthor(req: _root_.com.proto.book.GetBookViaAuthor): F[_root_.fs2.Stream[F, _root_.com.proto.book.Book]]
  def GetGreatestBook(req: _root_.fs2.Stream[F, _root_.com.proto.book.GetBookRequest]): F[_root_.com.proto.book.Book]
  def GetBooks(req: _root_.fs2.Stream[F, _root_.com.proto.book.GetBookRequest]): F[_root_.fs2.Stream[F, _root_.com.proto.book.Book]]
}

object BookService {
  val GetBookMethodDescriptor: _root_.io.grpc.MethodDescriptor[_root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book] = _root_.io.grpc.MethodDescriptor.newBuilder(_root_.scalapb.grpc.Marshaller.forMessage[_root_.com.proto.book.GetBookRequest], _root_.scalapb.grpc.Marshaller.forMessage[_root_.com.proto.book.Book]).setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY).setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("com.proto.BookService", "GetBook")).build()
  val GetBooksViaAuthorMethodDescriptor: _root_.io.grpc.MethodDescriptor[_root_.com.proto.book.GetBookViaAuthor, _root_.com.proto.book.Book] = _root_.io.grpc.MethodDescriptor.newBuilder(_root_.scalapb.grpc.Marshaller.forMessage[_root_.com.proto.book.GetBookViaAuthor], _root_.scalapb.grpc.Marshaller.forMessage[_root_.com.proto.book.Book]).setType(_root_.io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING).setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("com.proto.BookService", "GetBooksViaAuthor")).build()
  val GetGreatestBookMethodDescriptor: _root_.io.grpc.MethodDescriptor[_root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book] = _root_.io.grpc.MethodDescriptor.newBuilder(_root_.scalapb.grpc.Marshaller.forMessage[_root_.com.proto.book.GetBookRequest], _root_.scalapb.grpc.Marshaller.forMessage[_root_.com.proto.book.Book]).setType(_root_.io.grpc.MethodDescriptor.MethodType.CLIENT_STREAMING).setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("com.proto.BookService", "GetGreatestBook")).build()
  val GetBooksMethodDescriptor: _root_.io.grpc.MethodDescriptor[_root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book] = _root_.io.grpc.MethodDescriptor.newBuilder(_root_.scalapb.grpc.Marshaller.forMessage[_root_.com.proto.book.GetBookRequest], _root_.scalapb.grpc.Marshaller.forMessage[_root_.com.proto.book.Book]).setType(_root_.io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING).setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("com.proto.BookService", "GetBooks")).build()
  def bindService[F[_]](implicit CE: _root_.cats.effect.Async[F], algebra: BookService[F]): _root_.cats.effect.Resource[F, _root_.io.grpc.ServerServiceDefinition] = _root_.cats.effect.std.Dispatcher[F].evalMap {
    disp => _root_.higherkindness.mu.rpc.internal.service.GRPCServiceDefBuilder.build[F]("com.proto.BookService", (GetBookMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.handlers.unary[F, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](algebra.GetBook, _root_.higherkindness.mu.rpc.protocol.Identity, disp)), (GetBooksViaAuthorMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.fs2.handlers.serverStreaming[F, _root_.com.proto.book.GetBookViaAuthor, _root_.com.proto.book.Book]((req: _root_.com.proto.book.GetBookViaAuthor, _) => algebra.GetBooksViaAuthor(req), disp, _root_.higherkindness.mu.rpc.protocol.Identity)), (GetGreatestBookMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.fs2.handlers.clientStreaming[F, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book]((req: _root_.fs2.Stream[F, _root_.com.proto.book.GetBookRequest], _) => algebra.GetGreatestBook(req), disp, _root_.higherkindness.mu.rpc.protocol.Identity)), (GetBooksMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.fs2.handlers.bidiStreaming[F, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book]((req: _root_.fs2.Stream[F, _root_.com.proto.book.GetBookRequest], _) => algebra.GetBooks(req), disp, _root_.higherkindness.mu.rpc.protocol.Identity)))
  }
  def bindContextService[F[_], Context](implicit CE: _root_.cats.effect.Async[F], serverContext: _root_.higherkindness.mu.rpc.internal.context.ServerContext[F, Context], algebra: BookService[({ type T[α] = _root_.cats.data.Kleisli[F, Context, α] })#T]): _root_.cats.effect.Resource[F, _root_.io.grpc.ServerServiceDefinition] = _root_.cats.effect.std.Dispatcher[F].evalMap {
    disp => _root_.higherkindness.mu.rpc.internal.service.GRPCServiceDefBuilder.build[F]("com.proto.BookService", (GetBookMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.handlers.contextUnary[F, Context, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](algebra.GetBook, GetBookMethodDescriptor, _root_.higherkindness.mu.rpc.protocol.Identity, disp)), (GetBooksViaAuthorMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.fs2.handlers.contextServerStreaming[F, Context, _root_.com.proto.book.GetBookViaAuthor, _root_.com.proto.book.Book](algebra.GetBooksViaAuthor, GetBooksViaAuthorMethodDescriptor, disp, _root_.higherkindness.mu.rpc.protocol.Identity)), (GetGreatestBookMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.fs2.handlers.contextClientStreaming[F, Context, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](algebra.GetGreatestBook, GetGreatestBookMethodDescriptor, disp, _root_.higherkindness.mu.rpc.protocol.Identity)), (GetBooksMethodDescriptor, _root_.higherkindness.mu.rpc.internal.server.fs2.handlers.contextBidiStreaming[F, Context, _root_.com.proto.book.GetBookRequest, _root_.com.proto.book.Book](algebra.GetBooks, GetBooksMethodDescriptor, disp, _root_.higherkindness.mu.rpc.protocol.Identity)))
  }
}
